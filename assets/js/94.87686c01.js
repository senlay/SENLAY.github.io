(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{339:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h4",{attrs:{id:"mvvm-："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-：","aria-hidden":"true"}},[t._v("#")]),t._v(" MVVM ：")]),t._v(" "),n("ul",[n("li",[t._v("是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数  据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。")])]),t._v(" "),n("ul",[n("li",[t._v("vue.js是数据驱动DOM")])]),t._v(" "),n("h4",{attrs:{id:"指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 指令")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" + v-cloak\n + v-bind\n + v-model\n + v-for\n + v-if\n + v-show\n")])])]),n("h5",{attrs:{id:"_1-内部指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-内部指令","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 内部指令")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("v-cloak：阻止闪烁,这时虽然己经加了指令 v-cloak ，但其实并没有起到任何作用，当网速较慢、 Vue.js 文件还没加载完时，\n在页面上会显示｛ { message } ｝的字样，直到 Vue 创建实例、编译模板时， DOM 才会被替换，所以这个过程屏幕是有闪动的。\n只要加 css 就可以解决这个问题了")])]),t._v(" "),n("li",[n("p",[t._v("v-once:也是个不需要表达式的指令，作用是定义它的元素或组件只渲染 次，包括元素或组件的所有子节点。")])]),t._v(" "),n("li",[n("p",[t._v("v-if , v-else-if ,v-else")]),t._v(" "),n("p",[t._v("example:     ")]),!0===t.status?n("p",[t._v(t._s(t.msg+",当status==true时展示!!"))]):!1===t.status?n("p",[t._v(t._s(t.msg+",当status==false时展示!"))]):n("p",[t._v(t._s(t.msg+",否则显示改行!"))]),n("p")]),t._v(" "),n("li",[n("p",[t._v("v-show : 该指令与v-if用法基本一致，只是v-show在初始化渲染时占据大量消耗且会隐藏，v-if频繁刷新时都将插入和移除dom元素，如果表达式初始化时为false则\n无需选择v-show ，v-if 更适合条件不经常改变的场景，因为他的切换开销相对较大，而v-show适合频繁切换的场景")])]),t._v(" "),n("li",[n("p",[t._v("v-for:数组遍历或枚举一个对象循环显示时使用该指令，")]),t._v(" "),n("p",[t._v('example: 遍历数组：v-for="item in list"，遍历整数： v-for="n in 10"'),n("br"),t._v("\n遍历对象：\n")])]),t._l(t.user,(function(e,s,a){return n("li",[n("span",[t._v("索引："+t._s(a))]),t._v(" "),n("span",[t._v("key："+t._s(s))]),t._v(" "),n("span",[t._v("值："+t._s(e))])])})),n("p")],2),t._v(" "),n("h5",{attrs:{id:"_2-数组更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.数组更新")]),t._v(" "),n("pre",[n("code",[t._v("Vue 的核心是数据与视图的双向绑定，当我们修改数组时， Vue 会检测到数据变化，所以用\nv-for 渲染的视图也会立即更新。 Vue 包含了一组观察数组变异的方法，使用它们改变数组也会触\n发视图更新：\n+ push() : 往数组里放          \n+ pop()              \n+ shift()              \n+ unshift()   :后进先出，保持最新添加的在前面        \n+ splice()     ：删除         \n+ sort()       ：排序     \n+ reverse()     ：反转   \n")])]),t._v(" "),n("h4",{attrs:{id:"vue实例与数据绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue实例与数据绑定","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue实例与数据绑定")]),t._v(" "),n("ul",[n("li",[t._v("数据绑定：ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。")]),t._v(" "),n("li",[t._v("生命周期：每个vue实例创建的过程，都会经历一系列初始化过程，同时会调用相应的生命周期钩子，我们可以利用这些钩子，在合适时机执行我们的业务逻辑。vue的钩子类似JQuery的ready()方法。比较常用的有：")])]),t._v(" "),n("pre",[n("code",[t._v("-  created:实例创建完成后调用，此阶段完成了数据的观测等，但尚未挂载，$el还不可用。\n-   mounted:el挂在上实例后调用，一般我们第一个业务逻辑从这里开始。\n-  beforeDestroy：实例销毁前调用，主要解绑一些使用addEventListener监听事件等。\n")])]),t._v(" "),n("ul",[n("li",[t._v("插值与表达式：{{}}是最基本的文本插值方法，它会自动将我们双向绑定的数据实时显示出来。里面支持简单运算，三目表达式。")]),t._v(" "),n("li",[t._v("过滤器：{{}}里插入管道符|可以对数据进行过滤,过滤器在实例中编写filters:function(){}")]),t._v(" "),n("li",[t._v("指令与事件：指令是vue.js模板中常用的一项功能，它带有前缀v-，比如v-if、v-html、v-pre等。指令的主要职责是当其表达式的值改变时，相应的将某些行为应用在DOM上。")]),t._v(" "),n("li",[t._v("v-bind与v-on: v-bind的基本用途是动态更新HTML元素上的属性。v-on用来绑定事件监听器，用于用户与客户端的交互。")])]),t._v(" "),n("h4",{attrs:{id:"vue实例的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue实例的生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" vue实例的生命周期")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("什么是生命周期：从Vue实例创建、运行、销毁期间，总是伴随各种各样的事件。这些事件，统称为生命周期！")])]),t._v(" "),n("li",[n("p",[t._v("生命周期钩子=生命周期事件=生命周期函数")])]),t._v(" "),n("li",[n("p",[t._v("主要的生命周期函数分类：")]),t._v(" "),n("ul",[n("li",[t._v("创建期间的生命周期函数：\n"),n("ul",[n("li",[t._v("beforeCreate：实例刚在内存中被创建出来，此时，还没有初始化好data和methods属性")]),t._v(" "),n("li",[t._v("created:实例已经在内存中创建OK，此时data和methods已经创建OK，此时还没有开始编译模板")]),t._v(" "),n("li",[t._v("beforeMount:此时已经完成了模板的编译，但还没有挂载到页面中。")]),t._v(" "),n("li",[t._v("mounted:此时，已经将编译好的模板，挂载到了页面指定的容器中显示")])])]),t._v(" "),n("li",[t._v("运行期间的生命周期函数：\n"),n("ul",[n("li",[t._v("beforeUpdate:状态更新之前执行此函数，此时data中的状态值是最新的，但是界面上显示的，数据还是旧的，因为此时还没有开始重新渲染DOM节点")]),t._v(" "),n("li",[t._v("updated:实例更新完毕之后调用此函数，此时data中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了！")])])]),t._v(" "),n("li",[t._v("销毁期间的生命周期函数：\n"),n("ul",[n("li",[t._v("beforeDestroy:实例销毁之前调用，在这一步，实例仍然完全可用。")]),t._v(" "),n("li",[t._v("destroyed:Vue实例销毁后调用，调用后，Vue实例指示的所有东西都会被解绑定，所有的事件监听会被移除，所有的子实例也会被销毁。")])])])])])]),t._v(" "),n("h4",{attrs:{id:"vue实例的生命周期-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue实例的生命周期-2","aria-hidden":"true"}},[t._v("#")]),t._v(" vue实例的生命周期")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\n<div id="rrapp">\n\t<hr>\n\t<div class="form-group col-sm-2">\n\t\t<input type="text" class="form-control" v-model="path"  placeholder="路径">\n\t\t<input type="text" class="form-control" v-model="user.path"  placeholder="路径">\n\t\t<input type="text" class="form-control" v-model="user.name"  placeholder="关键值">\n\n        <a class="btn btn-default" @click="getList">查询</a>\n        <a class="btn btn-default" @click="saveOrUpdate">查询2</a>\n\n\t</div>\n\n\n\t<li v-for="list in lists">\n\t\t{{ list }}\n\t</li>\n\n\n</div>\n\n<script src="js/generator.js"><\/script>\n\nvar vm = new Vue({\n    el: \'#rrapp\',\n    data: {\n        q: {\n            tableName: null\n        },\n        lists: [],\n        path: \'\',\n        user:{\n            path:\'\',\n            name:\'\'\n        }\n    },\n    methods: {\n        getList: function () {\n            $.get("sys/generator/lists?path=" + vm.path, function (r) {\n                vm.lists = r.data;\n            });\n        },\n        submit: function () {\n            confirm(\'确定要选中的记录？\', function () {\n                $.ajax({\n                    type: "POST",\n                    url: baseURL + "sys/user/delete",\n                    contentType: "application/json",\n                    data: JSON.stringify(user),\n                    success: function (r) {\n                        if (r.code == 0) {\n                            alert(\'操作成功\', function () {\n                            });\n                        } else {\n                            alert(r.msg);\n                        }\n                    }\n                });\n            });\n        },\n        saveOrUpdate: function () {\n            // var url = vm.user.userId == null ? "sys/generator/user" : "sys/user/update";\n            $.ajax({\n                type: "POST",\n                url: "sys/generator/user",\n                contentType: "application/json",\n                data: JSON.stringify(vm.user),\n                success: function (r) {\n                    if (r.code === 0) {\n                        vm.lists = r.data;\n                        alert(\'操作成功\');\n                    } else {\n                        alert(r.msg);\n                    }\n                }\n            });\n        },\n\n\n    }\n});\n\n\n\n\n\t/**\n\t * 列表\n\t */\n\t@ResponseBody\n\t@RequestMapping("/lists")\n\tpublic R lists(String path){\n\n\n\t\tList list = new ArrayList();\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tlist.add(i);\n\t\t}\n\n\t\treturn R.ok().put("data", list);\n\t}\n\n\n\n\t@ResponseBody\n\t@RequestMapping(value = "/user",method = {RequestMethod.POST})\n\tpublic R lists(@RequestBody  User user){\n\n\t\tList list = new ArrayList();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tlist.add(JSON.toJSONString(user));\n\t\t}\n\n\t\treturn R.ok().put("data", list);\n\t}\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);