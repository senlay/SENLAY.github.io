(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{284:function(n,e,t){"use strict";t.r(e);var s=t(0),i=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h4",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景","aria-hidden":"true"}},[n._v("#")]),n._v(" 使用场景")]),n._v(" "),t("ul",[t("li",[n._v("读取文件")]),n._v(" "),t("li",[n._v("异步处理任务，如同步外围系统，发送队列消息")]),n._v(" "),t("li",[n._v("假如list数据量大，也可采用多线程对list进行处理")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    private static void listSub(List<Integer> list) throws InterruptedException, ExecutionException {\n        // 线程数\n        int threadCount = 10;\n        long sum = 0;\n        // 创建一个线程池\n        ExecutorService exec = Executors.newFixedThreadPool(threadCount);\n        List<Callable<Long>> callList = new ArrayList<Callable<Long>>();\n\n        int len = list.size() / threadCount;// 分割段数\n        if (len == 0) {\n            threadCount = list.size();\n            len = list.size() / threadCount;\n\n        }\n        for (int i = 0; i < threadCount; i++) {\n            final List<Integer> subList;\n            if (i == threadCount - 1) {\n                subList = list.subList(i * len, list.size());\n            } else {\n                subList = list.subList(i * len, len * (i + 1) > list.size() ? list.size() : len * (i + 1));\n            }\n            callList.add(new Callable<Long>() {\n                public Long call() throws Exception {\n                    long subSum = 0L;\n                    for (Integer i : subList) {\n                        subSum += i;\n                    }\n                    System.out.println("分配给线程=" + Thread.currentThread().getName() + "和为:" + subSum);\n                    return subSum;\n                }\n            });\n        }\n\n        List<Future<Long>> futureList = exec.invokeAll(callList);\n        for (Future<Long> future : futureList) {\n            sum += future.get();\n        }\n        exec.shutdown();\n        System.out.println("最后统计为:" + sum);\n    }\n\n')])])]),t("ul",[t("li",[n._v("CountDownLatch分批调用")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('  private void doSome(List<UserVo> userList, Set<String> userCodes, String staffCode) {\n        List<String> userCodeList = new ArrayList<>(userCodes);\n        long t1 = System.currentTimeMillis();\n        //根据50为一批次进行操作，多线程操作，最大等待5分钟\n        int baseNum = ParamUtils.getParamInt("Sys_001");\n        int times = (userCodeList.size() / baseNum) + (userCodeList.size() % baseNum != 0 ? 1 : 0);\n        CountDownLatch countDownLatch = new CountDownLatch(times);\n        for (int i = 0; i < times; i++) {\n            int lastIndex = (i + 1) * baseNum > userCodeList.size() ? userCodeList.size() : (i + 1) * baseNum;\n            List<String> subDataList = userCodeList.subList(i * baseNum, lastIndex);\n            String finalStaffCode = staffCode + Constants.SPLIT_UNDERLINE + i;\n            ExcuteUtils.addExcuteJob(() -> {\n                UserVo user = new UserVo();\n                user.setCreUsr(staffCode);\n                try {\n                    omsFeignClient.qryUser(reqVo);\n                } catch (BaseAppException e) {\n                    log.error(e.getMessage(), e);\n                } finally {\n                    countDownLatch.countDown();\n                }\n\n            });\n        }\n\n        try {\n            boolean isEnd = countDownLatch.await(5, TimeUnit.MINUTES);\n            ExceptionHandler.publishMsg(!isEnd, "规定时间内，5分钟，没有处理完数据");\n        } catch (Exception e) {\n            log.error("omsFeignClient.qryUser failed." + e.getMessage(), e);\n        }\n        long t2 = System.currentTimeMillis();\n        log.info("omsFeignClient.qryUser final costs={}", t2 - t1);\n        UserVo user = new UserVo();\n        user.setCreUsr(staffCode);\n        List<UserVo> users = userDao.qryUser(item);\n        if (Utils.isEmpty(users)) {\n            return;\n        }\n        long t3 = System.currentTimeMillis();\n        log.info("do  costs={}", (t3 - t2));\n\n        // do  something\n\n\n    }\n\n\n')])])]),t("ul",[t("li",[n._v("CountDownLatch分页调用")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public static void main(String[] args) {\n        int total = userDao.count();\n        if (total < 1) {\n            return;\n        }\n        // 每次按200调用\n        Page page = new Page(1, 200, total);\n        CountDownLatch countDownLatch = new CountDownLatch(page.getTotalPage());\n        try {\n\n            for (int i = 0; i < page.getTotalPage(); i++) {\n                int offset = page.getPageSize() * i;\n                JobUtils.addExcuteJob(() -> {\n                    try {\n                        List<UserVo> userVoList = userDao.qryUserList(page.getPageSize(), offset);\n                        // do something\n                        Map<String, OrderDTO> orderDTOMap = orderFeignClient.qryOrders(userVoList);\n                        // do something......\n                    } catch (Exception e) {\n                        log.error("batch update OrderOnetime failed." + e.getMessage(), e);\n                    } finally {\n                        countDownLatch.countDown();\n                    }\n\n\n                });\n            }\n\n            boolean isEnd = countDownLatch.await(3, TimeUnit.MINUTES);\n            ExceptionHandler.publishMsg(!isEnd, "规定时间内，3分钟，没有处理完数据");\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        }\n\n\n    }\n\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);