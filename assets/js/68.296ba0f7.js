(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{313:function(e,s,r){"use strict";r.r(s);var t=r(0),i=Object(t.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h4",{attrs:{id:"如何安装？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何安装？","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何安装？")]),e._v(" "),r("ul",[r("li",[e._v("获取资源")])]),e._v(" "),r("blockquote",[r("p",[e._v("wget http://download.redis.io/releases/redis-stable.tar.gz")])]),e._v(" "),r("ul",[r("li",[e._v("解压")])]),e._v(" "),r("blockquote",[r("p",[e._v("移动到usr/local/ 并执行解压命令： tar xzvf redis-stable.tar.gz\ncd redis-stable\nmake\ncd src\nmake install PREFIX=/usr/local/redis")])]),e._v(" "),r("ul",[r("li",[e._v("如遇错误“server.c:5171:176: 错误：‘struct redisServer’没有名为‘maxmemory’的成员”")])]),e._v(" "),r("blockquote",[r("p",[e._v("错误原因：gcc版本问题，新版本的。redis6.0以上\ngcc -v")])]),e._v(" "),r("ul",[r("li",[e._v("解决办法")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    // 升级到 5.3及以上版本\n    yum -y install centos-release-scl\n    yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\n     \n    scl enable devtoolset-9 bash\n     \n    #注意：scl命令启用只是临时的，推出xshell或者重启就会恢复到原来的gcc版本。\n    #如果要长期生效的话，执行如下：\n    echo "source /opt/rh/devtoolset-9/enable" >>/etc/profile\n')])])]),r("h4",{attrs:{id:"后台启动？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#后台启动？","aria-hidden":"true"}},[e._v("#")]),e._v(" 后台启动？")]),e._v(" "),r("ul",[r("li",[e._v("启动脚本 redis_init_script 位于位于Redis的 /utils/ 目录下，redis_init_script脚本代码如下")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('#!/bin/sh\n# chkconfig:   2345 90 10\n#!/bin/sh\n#\n# Simple Redis init.d script conceived to work on Linux systems\n# as it does use of the /proc filesystem.\n\n### BEGIN INIT INFO\n# Provides:     redis_6379\n# Default-Start:        2 3 4 5\n# Default-Stop:         0 1 6\n# Short-Description:    Redis data structure server\n# Description:          Redis data structure server. See https://redis.io\n### END INIT INFO\n\nREDISPORT=6379\nEXEC=/usr/local/bin/redis-server\nCLIEXEC=/usr/local/bin/redis-cli\n\nPIDFILE=/var/run/redis_${REDISPORT}.pid\nCONF="/etc/redis/${REDISPORT}.conf"\n\ncase "$1" in\n    start)\n        if [ -f $PIDFILE ]\n        then\n                echo "$PIDFILE exists, process is already running or crashed"\n        else\n                echo "Starting Redis server..."\n                $EXEC $CONF\n        fi\n        ;;\n    stop)\n        if [ ! -f $PIDFILE ]\n        then\n                echo "$PIDFILE does not exist, process is not running"\n        else\n                PID=$(cat $PIDFILE)\n                echo "Stopping ..."\n                $CLIEXEC -p $REDISPORT shutdown\n                while [ -x /proc/${PID} ]\n                do\n                    echo "Waiting for Redis to shutdown ..."\n                    sleep 1\n                done\n                echo "Redis stopped"\n        fi\n        ;;\n    *)\n        echo "Please use start or stop as first argument"\n        ;;\nesac\n\n')])])]),r("ul",[r("li",[e._v("将redis_init_script 复制到指定目录下，用root用户进行操作")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("cp redis_init_script /etc/init.d/redisd\n\n")])])]),r("ul",[r("li",[e._v("修改redis.conf")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("创建  /etc/redis目录  存放配置文件\n创建  /var/redis/端口号目录 用来存放持久化文件\n\nport 6379   指定端口\ndir /var/redis/6379  设置持久化文件存放位置\npidfile /var/run/redis_6379.pid  设置redis的pid文件位置\ndaemonize yes 以后台守护进程方式运行\n\n")])])]),r("ul",[r("li",[e._v("将redis.conf 复制到指定目录下")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("mkdir /etc/redis\ncp redis.conf /etc/redis/6379.conf\n\n")])])]),r("ul",[r("li",[e._v("执行以下启动命令")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("#设置为开机自启动服务器\nchkconfig redisd on\n#打开服务\nservice redisd start\n#关闭服务\nservice redisd stop\n\n")])])]),r("h4",{attrs:{id:"redis的启动和停止"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis的启动和停止","aria-hidden":"true"}},[e._v("#")]),e._v(" redis的启动和停止")]),e._v(" "),r("blockquote",[r("p",[e._v("redis-server             Redis 服务器\nredis-cli                Redis 客户端\nredis-benchmark          Redis 性能测试工具\nredis-check-aof          AOF 文件修复工具\nredis-check-dump         RDB 文件检查工具\nredis-sentinel           Sentinel服务器")])]),e._v(" "),r("ul",[r("li",[e._v("启动")])]),e._v(" "),r("blockquote",[r("p",[e._v("redis-server 或者 redis-server  --port 6380")])]),e._v(" "),r("ul",[r("li",[e._v("停止")])]),e._v(" "),r("blockquote",[r("p",[e._v("考虑到redis有可能正在将内存中的数据往硬盘中同步，强行终止redis进程可能导致数据丢失，因此正确姿势：\nredis-cli SHUTDOWN 通过客户端发送停止指令，redis收到shutdown指令后，会先断开所有客户端连接，然后根据\n配置执行持久化，最后再退出，除此之外，因为redis可以妥善处理 SIGTERM信号，所以使用 kill Redis进程的PID同shutdown一样")])]),e._v(" "),r("h4",{attrs:{id:"redis-客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-客户端","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 客户端")]),e._v(" "),r("ul",[r("li",[e._v("连接")])]),e._v(" "),r("blockquote",[r("p",[e._v("redis-cli -h 127.0.0.1 -p 6379\nredis-cli ping可以测试是否连接正常")])]),e._v(" "),r("h4",{attrs:{id:"redis-整数回复"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-整数回复","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 整数回复")]),e._v(" "),r("ul",[r("li",[e._v("INCR命令返回整数的递增值，如：")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("127.0.0.1:6379> incr foo\n(integer) 1\n127.0.0.1:6379> incr foo\n(integer) 2\n127.0.0.1:6379> incr foo\n(integer) 3\n127.0.0.1:6379> incr foo\n(integer) 4\n\n")])])]),r("ul",[r("li",[e._v("字符串回复")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// 获取key=foo的对应值\n127.0.0.1:6379> get foo\n"4"\n// 如果获取一个不存在的key,则返回nil\n127.0.0.1:6379> get foo1\n(nil)\n// 获取所有key\n127.0.0.1:6379> keys *\n1) "h"\n2) "foo"\n\n\n')])])]),r("h4",{attrs:{id:"redis配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis配置","aria-hidden":"true"}},[e._v("#")]),e._v(" redis配置")]),e._v(" "),r("ul",[r("li",[e._v("config set命令")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// 使用config命令修改配置文件\n127.0.0.1:6379> config set loglevel warning\nOK\n127.0.0.1:6379> config get loglevel\n1) "loglevel"\n2) "warning"\n127.0.0.1:6379> \n')])])]),r("h4",{attrs:{id:"redis数据库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis数据库","aria-hidden":"true"}},[e._v("#")]),e._v(" redis数据库")]),e._v(" "),r("ul",[r("li",[e._v("默认支持16个数据库，可以通过配置参数database来修改这个参数")]),e._v(" "),r("li",[e._v("默认会自动连接0号数据库，可以开发一个，测试一个，灵活配置")])]),e._v(" "),r("blockquote",[r("p",[e._v("开发、测试、生产 对应0，1，2 三套redis库，进行隔离")])]),e._v(" "),r("ul",[r("li",[e._v("可以通过select 命令更换数据库")])]),e._v(" "),r("blockquote",[r("p",[e._v("如: select 1")])]),e._v(" "),r("ul",[r("li",[e._v("flushall 可以清空一个redis实例中所有数据库中的数据（高危动作）")])]),e._v(" "),r("h4",{attrs:{id:"redis-常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 常用命令")]),e._v(" "),r("ul",[r("li",[e._v('set k "hello world"')]),e._v(" "),r("li",[e._v("get k")]),e._v(" "),r("li",[e._v("del k")]),e._v(" "),r("li",[e._v("type k")]),e._v(" "),r("li",[e._v("lpush k 1")]),e._v(" "),r("li",[e._v("exists k")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 存在返回1，不存在返回0，同理，删除也是\n127.0.0.1:6379> exists k127.0.0.1:6379> exists k\n(integer) 0\n127.0.0.1:6379> exists foo\n(integer) 1\n127.0.0.1:6379> \n(integer) 0\n127.0.0.1:6379> exists foo\n(integer) 1\n")])])]),r("h4",{attrs:{id:"redis-数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据类型","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 数据类型")]),e._v(" "),r("ul",[r("li",[e._v("字符串")]),e._v(" "),r("li",[e._v("集合")]),e._v(" "),r("li",[e._v("列表")])]),e._v(" "),r("h4",{attrs:{id:"redis-应用场景：排行榜、日志、热点数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-应用场景：排行榜、日志、热点数据","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 应用场景：排行榜、日志、热点数据")]),e._v(" "),r("h4",{attrs:{id:"redis-事务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-事务","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 事务")]),e._v(" "),r("h4",{attrs:{id:"redis-消息队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-消息队列","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 消息队列")]),e._v(" "),r("h4",{attrs:{id:"redis-主题-订阅"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-主题-订阅","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 主题-订阅")]),e._v(" "),r("h4",{attrs:{id:"redis-防止恶意点击-过期key应用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-防止恶意点击-过期key应用","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 防止恶意点击-过期key应用")]),e._v(" "),r("h4",{attrs:{id:"redis-布隆过滤器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-布隆过滤器","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 布隆过滤器")]),e._v(" "),r("h4",{attrs:{id:"redis-缓存穿透"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-缓存穿透","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 缓存穿透")]),e._v(" "),r("h4",{attrs:{id:"redis-缓存雪崩"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-缓存雪崩","aria-hidden":"true"}},[e._v("#")]),e._v(" redis 缓存雪崩")])])}),[],!1,null,null,null);s.default=i.exports}}]);