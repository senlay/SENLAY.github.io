(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{318:function(n,e,t){"use strict";t.r(e);var i=t(0),r=Object(i.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h4",{attrs:{id:"spring事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring事务","aria-hidden":"true"}},[n._v("#")]),n._v(" spring事务:")]),n._v(" "),t("ul",[t("li",[n._v("事务的定义\n"),t("ul",[t("li",[n._v("原子性：一组不可分割的操作，事务中的操作要么都发生了，要么都不发生。")]),n._v(" "),t("li",[n._v("一致性:  事务执行前后的数据的完整性要保持一致。")]),n._v(" "),t("li",[n._v("隔离性：指的是多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个事务之间的数据要相互隔离。")]),n._v(" "),t("li",[n._v("持久性：一个事务一旦提交，它对数据库中的数据的影响是永久性的。即使数据库发生故障，也不应该有什么影响。")])])]),n._v(" "),t("li",[n._v("定义事务的属性（隔离级别）\n"),t("ul",[t("li",[n._v("脏读：\n"),t("blockquote",[t("p",[n._v("一个事务读到了另一个事务还没有提交的数据，如果这些数据被回滚了，则读到的数据是无效的")])])]),n._v(" "),t("li",[n._v("不可重复读：\n"),t("blockquote",[t("p",[n._v("在同一个事务中，多次读取的结果数据有所不同。即读到了其它事务提交后更新的数据。")])])]),n._v(" "),t("li",[n._v("幻读：\n"),t("blockquote",[t("p",[n._v("一个事务读取几条记录后，另一个事务插入了新的记录，该事务在后来的读取中读到了新插入的数据。")])])])])]),n._v(" "),t("li",[n._v("spring 四种隔离级别")])]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/spring1.png",alt:""}})]),n._v(" "),t("ul",[t("li",[n._v("spring 传播机制")])]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/spring2.png",alt:""}})]),n._v(" "),t("ul",[t("li",[t("p",[n._v("spring bean生命周期")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("1.bean对象的实例化")])]),n._v(" "),t("li",[t("p",[n._v("2.封装属性，也就是设置properties中的属性值")])]),n._v(" "),t("li",[t("p",[n._v("3.如果bean实现了BeanNameAware，则执行setBeanName方法,也就是bean中的id值")])]),n._v(" "),t("li",[t("p",[n._v("4.如果实现BeanFactoryAware或者ApplicationContextAware ，需要设置setBeanFactory或者上下文对象setApplicationContext")])]),n._v(" "),t("li",[t("p",[n._v("5.如果存在类实现BeanPostProcessor后处理bean，执行postProcessBeforeInitialization，可以在初始化之前执行一些方法")])]),n._v(" "),t("li",[t("p",[n._v("6.如果bean实现了InitializingBean，则执行afterPropertiesSet，执行属性设置之后的操作")])]),n._v(" "),t("li",[t("p",[n._v("7.调用"),t("bean",{attrs:{"init-method":""}},[n._v("执行指定的初始化方法")])],1)]),n._v(" "),t("li",[t("p",[n._v("8.如果存在类实现BeanPostProcessor则执行postProcessAfterInitialization，执行初始化之后的操作")])]),n._v(" "),t("li",[t("p",[n._v("9.执行自身的业务方法")])]),n._v(" "),t("li",[t("p",[n._v("10.如果bean实现了DisposableBean，则执行spring的的销毁方法")])]),n._v(" "),t("li",[t("p",[n._v("11.调用"),t("bean",{attrs:{"destory-method":""}},[n._v("执行自定义的销毁方法。")])],1)])])])]),n._v(" "),t("p",[t("img",{attrs:{src:"/img/spring-bean.png",alt:""}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package com.dtree.mybatis.service.impl;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanNameAware;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.SmartInitializingSingleton;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.SmartLifecycle;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoImpl implements SmartInitializingSingleton, SmartLifecycle, InitializingBean,\n         BeanNameAware, ApplicationContextAware , DisposableBean {\n\n    private boolean isRunning;\n\n\n    public DemoImpl() {\n        System.out.println("实例化");\n    }\n\n    public void sayHello(){\n        System.out.println("hello World");\n    }\n\n\n    @Override\n    public void setBeanName(String s) {\n        System.out.println("set bean Name aware"+s);\n\n    }\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        System.out.println("afterproperties set");\n\n    }\n\n    @Override\n    public void afterSingletonsInstantiated() {\n        System.out.println("hello afterSingletonsInstantiated");\n\n    }\n\n    @Override\n    public boolean isAutoStartup() {\n        return true;\n    }\n\n    @Override\n    public void stop(Runnable runnable) {\n        System.out.println("LifeScycle stop");\n        runnable.run();\n    }\n\n    @Override\n    public void start() {\n        isRunning = true;\n        System.out.println("LifeCycle start");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println("LifeCycle stop");\n\n    }\n\n    @Override\n    public boolean isRunning() {\n        return isRunning;\n    }\n\n    @Override\n    public int getPhase() {\n        return 0;\n    }\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        System.out.println("set Application Aware");\n\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        System.out.println("LifeScycle destroy");\n    }\n}\n\n    public static void main(String[] args) {\n        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("conf/spring/spring-core.xml");\n        DemoImpl hello = (DemoImpl) applicationContext.getBean("demoImpl");\n        hello.sayHello();\n        applicationContext.close();\n    }\n\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);